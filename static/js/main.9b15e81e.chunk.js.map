{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","api/posts.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","currentUserPosts","activePost","setActivePost","className","map","post","id","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","addComment","comment","NewCommentForm","activePostId","postComments","setPostComments","useState","name","email","newComment","setNewComment","isAdding","setIsAdding","isError","setIsError","isNameError","setIsNameError","isEmailError","setIsEmailError","isTextError","setIsTextError","addPostComments","a","onSubmit","event","preventDefault","commentToAdd","postId","htmlFor","placeholder","value","onChange","target","PostDetails","isFindComments","setIsFindComments","isFormActive","setIsFormActive","getPostComments","removeComment","filter","activeComment","commentId","useEffect","length","href","UserSelector","users","currentUser","setCurrentUser","getUserPosts","isButtonTriggered","setIsButtonTriggered","role","user","App","setUsers","setCurrentUserPosts","isFindPosts","setIsFindPosts","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b15e81e.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  currentUserPosts: Post[],\n  activePost: Post,\n  setActivePost(post: Post | null): void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  currentUserPosts,\n  activePost,\n  setActivePost,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {currentUserPosts.map(post => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button is-link',\n                    { 'is-light': post !== activePost },\n                  )}\n                  onClick={() => (\n                    post !== activePost\n                      ? setActivePost(post)\n                      : setActivePost(null)\n                  )}\n                >\n                  {activePost === post ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","// import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number, postId: number) => {\n  return client.delete(`/comments/${commentId}?postId=${postId}`);\n};\n\nexport const addComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Comment } from '../types/Comment';\nimport { addComment } from '../api/posts';\n\ntype Props = {\n  activePostId: number,\n  postComments: Comment[],\n  setPostComments(comment: Comment[]): void,\n};\n\ninterface NewComment {\n  name: string;\n  email: string;\n  body: string;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  activePostId,\n  postComments,\n  setPostComments,\n}) => {\n  const [newComment, setNewComment] = useState<NewComment>({\n    name: '',\n    email: '',\n    body: '',\n  });\n  const [isAdding, setIsAdding] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isNameError, setIsNameError] = useState(false);\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isTextError, setIsTextError] = useState(false);\n  const addPostComments = async (comment: Omit<Comment, 'id'>) => {\n    setIsError(false);\n    setIsAdding(true);\n\n    try {\n      const response = await addComment(comment);\n\n      setPostComments([\n        ...postComments,\n        response,\n      ]);\n\n      setIsAdding(false);\n    } catch {\n      setIsError(true);\n      setIsAdding(false);\n    }\n\n    setNewComment({\n      ...newComment,\n      body: '',\n    });\n\n    setIsAdding(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        if (newComment.name === '') {\n          setIsNameError(true);\n        }\n\n        if (newComment.email === '') {\n          setIsEmailError(true);\n        }\n\n        if (newComment.body === '') {\n          setIsTextError(true);\n        }\n\n        if (newComment.name !== ''\n          && newComment.email !== ''\n          && newComment.body !== '') {\n          const commentToAdd: Omit<Comment, 'id'> = {\n            postId: activePostId,\n            name: newComment.name,\n            email: newComment.email,\n            body: newComment.body,\n          };\n\n          addPostComments(commentToAdd);\n        } else {\n          setIsTextError(true);\n        }\n      }}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': isNameError })}\n            value={newComment.name}\n            onChange={(event) => {\n              setIsNameError(false);\n              setNewComment({\n                ...newComment,\n                name: event.target.value,\n              });\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': isEmailError })}\n            value={newComment.email}\n            onChange={(event) => {\n              setIsEmailError(false);\n              setNewComment({\n                ...newComment,\n                email: event.target.value,\n              });\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': isTextError })}\n            value={newComment.body}\n            onChange={(event) => {\n              setIsTextError(false);\n              setNewComment({\n                ...newComment,\n                body: event.target.value,\n              });\n            }}\n          />\n        </div>\n\n        {isTextError && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      {isError && (\n        <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n          Something went wrong\n        </div>\n      )}\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', { 'is-loading': isAdding })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => {\n              setNewComment({\n                name: '',\n                email: '',\n                body: '',\n              });\n              setIsNameError(false);\n              setIsEmailError(false);\n              setIsTextError(false);\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { getComments, deleteComment } from '../api/posts';\n\ntype Props = {\n  activePost: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ activePost }) => {\n  const [isFindComments, setIsFindComments] = useState(false);\n  const [postComments, setPostComments] = useState<Comment[] | []>([]);\n  const [isError, setIsError] = useState(false);\n  const [isFormActive, setIsFormActive] = useState(false);\n  const getPostComments = async (post: Post) => {\n    setIsError(false);\n    setIsFindComments(true);\n\n    try {\n      const response = await getComments(post.id);\n\n      setPostComments(response);\n\n      setIsFindComments(false);\n    } catch {\n      setIsFindComments(false);\n      setIsError(true);\n    }\n\n    setIsFindComments(false);\n  };\n\n  const removeComment = async (comment: Comment) => {\n    setPostComments(\n      postComments.filter(activeComment => activeComment.id !== comment.id),\n    );\n\n    deleteComment(comment.id, activePost.id);\n  };\n\n  useEffect(() => {\n    setPostComments([]);\n    setIsFormActive(false);\n    getPostComments(activePost);\n  }, [activePost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${activePost.id}: ${activePost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {activePost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isFindComments && (\n            <Loader />\n          )}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(postComments.length < 1 && !isFindComments && !isError) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {(!isFindComments && !isError && postComments.length > 0) && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {postComments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => removeComment(comment)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {(!isFindComments && !isError && !isFormActive) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsFormActive(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormActive && (\n          <NewCommentForm\n            activePostId={activePost.id}\n            postComments={postComments}\n            setPostComments={comment => setPostComments(comment)}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  currentUser: User;\n  setCurrentUser(user: User): void,\n  getUserPosts(user: User): void;\n  setActivePost(): void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  currentUser,\n  setCurrentUser,\n  getUserPosts,\n  setActivePost,\n}) => {\n  const [isButtonTriggered, setIsButtonTriggered] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsButtonTriggered(!isButtonTriggered)}\n        >\n          <span>{!currentUser ? 'Choose a user' : currentUser.name}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isButtonTriggered && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                key={user.id}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': currentUser === user },\n                )}\n                onClick={() => {\n                  setCurrentUser(user);\n                  setIsButtonTriggered(false);\n                  getUserPosts(user);\n                  setActivePost();\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { getUsers, getPosts } from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [currentUserPosts, setCurrentUserPosts] = useState<Post[]>([]);\n  const [isFindPosts, setIsFindPosts] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [activePost, setActivePost] = useState<null | Post>(null);\n\n  const getUserPosts = async (user: User) => {\n    setIsError(false);\n    setIsFindPosts(true);\n\n    try {\n      const response = await getPosts(user.id);\n\n      setCurrentUserPosts(response);\n\n      setIsFindPosts(false);\n    } catch {\n      setIsFindPosts(false);\n      setIsError(true);\n    }\n\n    setIsFindPosts(false);\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(value => {\n        setUsers(value);\n      });\n  }, []);\n\n  // useMemo(() => setActivePost(null), [activePost]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  currentUser={currentUser as User}\n                  setCurrentUser={user => setCurrentUser(user)}\n                  getUserPosts={getUserPosts}\n                  setActivePost={() => setActivePost(null)}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!currentUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isFindPosts && (\n                  <Loader />\n                )}\n\n                {isError && (\n                  <div\n                    className={classNames(\n                      'notification',\n                      { 'is-danger': isError },\n                    )}\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {(currentUserPosts.length < 1\n                  && currentUser\n                  && !isFindPosts\n                ) && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {(currentUserPosts.length > 0) && (\n                  <PostsList\n                    currentUserPosts={currentUserPosts}\n                    activePost={activePost as Post}\n                    setActivePost={post => setActivePost(post)}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': activePost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {activePost && (\n                <PostDetails\n                  activePost={activePost}\n                />\n              )}\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}