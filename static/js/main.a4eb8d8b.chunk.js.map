{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/CommentsList.tsx","utils/fetchClient.ts","api/posts.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","currentUserPosts","activePost","setActivePost","className","map","post","id","title","type","classNames","onClick","Loader","CommentsList","postComments","commentToRemove","handleRemovingComment","isRemovingComment","comment","href","email","name","body","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","addComment","NewCommentForm","activePostId","setPostComments","useState","newComment","setNewComment","isAdding","setIsAdding","isError","setIsError","isNameError","setIsNameError","isEmailError","setIsEmailError","isTextError","setIsTextError","addPostComments","a","trimText","text","trim","onSubmit","event","preventDefault","commentToAdd","postId","htmlFor","placeholder","value","onChange","target","PostDetails","isFindComments","setIsFindComments","setCommentToRemove","isDeleteError","setIsDeleteError","isFormActive","setIsFormActive","setIsRemovingComment","getPostComments","removeComment","commentId","filter","activeComment","useEffect","length","UserSelector","users","currentUser","onUserSelect","isButtonTriggered","setIsButtonTriggered","role","user","App","setUsers","setCurrentUser","setCurrentUserPosts","isLoadingPosts","setIsLoadingPosts","getUserPosts","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a4eb8d8b.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  currentUserPosts: Post[],\n  activePost: Post | null,\n  setActivePost(post: Post | null): void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  currentUserPosts,\n  activePost,\n  setActivePost,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {currentUserPosts.map(post => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button is-link',\n                    { 'is-light': post !== activePost },\n                  )}\n                  onClick={() => (\n                    post !== activePost\n                      ? setActivePost(post)\n                      : setActivePost(null)\n                  )}\n                >\n                  {activePost === post ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Comment } from '../types/Comment';\nimport { Loader } from './Loader';\n\ntype Props = {\n  postComments: Comment[] | [],\n  commentToRemove: Comment | null,\n  handleRemovingComment(comment: Comment): void,\n  isRemovingComment: boolean,\n};\n\nexport const CommentsList: React.FC<Props> = ({\n  postComments,\n  commentToRemove,\n  handleRemovingComment,\n  isRemovingComment,\n}) => (\n  <>\n    {postComments.map(comment => (\n      <article\n        className=\"message is-small\"\n        data-cy=\"Comment\"\n        key={comment.id}\n      >\n        {isRemovingComment && commentToRemove === comment ? (\n          <Loader />\n        ) : (\n          <>\n            <div className=\"message-header\">\n              <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                {comment.name}\n              </a>\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n                onClick={() => handleRemovingComment(comment)}\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              {comment.body}\n            </div>\n          </>\n        )}\n      </article>\n    ))}\n  </>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number, postId: number) => {\n  return client.delete(`/comments/${commentId}?postId=${postId}`);\n};\n\nexport const addComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Comment } from '../types/Comment';\nimport { addComment } from '../api/posts';\n\ntype Props = {\n  activePostId: number,\n  postComments: Comment[],\n  setPostComments(comment: Comment[]): void,\n};\n\ninterface NewComment {\n  name: string;\n  email: string;\n  body: string;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  activePostId,\n  postComments,\n  setPostComments,\n}) => {\n  const [newComment, setNewComment] = useState<NewComment>({\n    name: '',\n    email: '',\n    body: '',\n  });\n  const [isAdding, setIsAdding] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isNameError, setIsNameError] = useState(false);\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isTextError, setIsTextError] = useState(false);\n\n  const addPostComments = async (comment: Omit<Comment, 'id'>) => {\n    setIsError(false);\n    setIsAdding(true);\n\n    try {\n      const response = await addComment(comment);\n\n      setPostComments([\n        ...postComments,\n        response,\n      ]);\n    } catch {\n      setIsError(true);\n      setTimeout(() => setIsError(false), 2500);\n    } finally {\n      setIsAdding(false);\n\n      setNewComment({\n        ...newComment,\n        body: '',\n      });\n    }\n  };\n\n  const trimText = (text: string) => (\n    text[0] === ' ' ? text.trim() : text\n  );\n\n  const handleNameSetting = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsNameError(false);\n    setNewComment({\n      ...newComment,\n      name: trimText(event.target.value),\n    });\n  };\n\n  const handleEmailSetting = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsEmailError(false);\n    setNewComment({\n      ...newComment,\n      email: trimText(event.target.value),\n    });\n  };\n\n  const handleTextSetting = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setIsTextError(false);\n    setNewComment({\n      ...newComment,\n      body: trimText(event.target.value),\n    });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        if (!newComment.name.trim()) {\n          setIsNameError(true);\n        }\n\n        if (!newComment.email.trim()) {\n          setIsEmailError(true);\n        }\n\n        if (!newComment.body.trim()) {\n          setIsTextError(true);\n        }\n\n        if (newComment.name\n          && newComment.email\n          && newComment.body) {\n          const commentToAdd: Omit<Comment, 'id'> = {\n            postId: activePostId,\n            name: newComment.name,\n            email: newComment.email,\n            body: newComment.body,\n          };\n\n          addPostComments(commentToAdd);\n        }\n      }}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': isNameError })}\n            value={newComment.name}\n            onChange={handleNameSetting}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': isEmailError })}\n            value={newComment.email}\n            onChange={handleEmailSetting}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': isTextError })}\n            value={newComment.body}\n            onChange={handleTextSetting}\n          />\n        </div>\n\n        {isTextError && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      {isError && (\n        <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n          Something went wrong\n        </div>\n      )}\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', { 'is-loading': isAdding })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => {\n              setNewComment({\n                name: '',\n                email: '',\n                body: '',\n              });\n              setIsNameError(false);\n              setIsEmailError(false);\n              setIsTextError(false);\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { CommentsList } from './CommentsList';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { getComments, deleteComment } from '../api/posts';\n\ntype Props = {\n  activePost: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ activePost }) => {\n  const [isFindComments, setIsFindComments] = useState(false);\n  const [postComments, setPostComments] = useState<Comment[] | []>([]);\n  const [commentToRemove, setCommentToRemove] = useState<Comment | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isDeleteError, setIsDeleteError] = useState(false);\n  const [isFormActive, setIsFormActive] = useState(false);\n  const [isRemovingComment, setIsRemovingComment] = useState(false);\n  const getPostComments = async (post: Post) => {\n    setIsError(false);\n    setIsFindComments(true);\n\n    try {\n      const response = await getComments(post.id);\n\n      setPostComments(response);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsFindComments(false);\n    }\n  };\n\n  const removeComment = async (comment: Comment) => {\n    setIsRemovingComment(true);\n    setIsDeleteError(false);\n\n    try {\n      await deleteComment(comment.id, activePost.id);\n\n      setPostComments(\n        postComments.filter(activeComment => activeComment.id !== comment.id),\n      );\n    } catch {\n      setIsDeleteError(true);\n      setTimeout(() => setIsDeleteError(false), 2500);\n    } finally {\n      setIsRemovingComment(false);\n    }\n  };\n\n  const handleRemovingComment = (comment: Comment) => {\n    setCommentToRemove(comment);\n    removeComment(comment);\n  };\n\n  useEffect(() => {\n    getPostComments(activePost);\n    setIsFormActive(false);\n  }, [activePost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${activePost.id}: ${activePost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {activePost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isFindComments && (\n            <Loader />\n          )}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(postComments.length < 1 && !isFindComments && !isError) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {(!isFindComments && !isError && postComments.length > 0) && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              <CommentsList\n                postComments={postComments}\n                commentToRemove={commentToRemove}\n                handleRemovingComment={handleRemovingComment}\n                isRemovingComment={isRemovingComment}\n              />\n            </>\n          )}\n\n          {isDeleteError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(!isFindComments && !isError && !isFormActive) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsFormActive(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormActive && (\n          <NewCommentForm\n            activePostId={activePost.id}\n            postComments={postComments}\n            setPostComments={comment => setPostComments(comment)}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  currentUser: User | null;\n  onUserSelect(user: User): void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  currentUser,\n  onUserSelect,\n}) => {\n  const [isButtonTriggered, setIsButtonTriggered] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsButtonTriggered(!isButtonTriggered)}\n        >\n          <span>{!currentUser ? 'Choose a user' : currentUser.name}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isButtonTriggered && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                key={user.id}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': currentUser === user },\n                )}\n                onClick={() => {\n                  onUserSelect(user);\n                  setIsButtonTriggered(false);\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { getUsers, getPosts } from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [currentUserPosts, setCurrentUserPosts] = useState<Post[]>([]);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [activePost, setActivePost] = useState<null | Post>(null);\n\n  const getUserPosts = async (user: User) => {\n    setIsError(false);\n    setIsLoadingPosts(true);\n\n    try {\n      const response = await getPosts(user.id);\n\n      setCurrentUserPosts(response);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoadingPosts(false);\n    }\n  };\n\n  const hideCommemts = () => {\n    setActivePost(null);\n    setCurrentUserPosts([]);\n  };\n\n  const handleUserSelect = (user: User) => {\n    setCurrentUser(user);\n    getUserPosts(user);\n    hideCommemts();\n    setActivePost(null);\n    setCurrentUserPosts([]);\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(value => {\n        setUsers(value);\n      });\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  currentUser={currentUser}\n                  onUserSelect={handleUserSelect}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!currentUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingPosts && (\n                  <Loader />\n                )}\n\n                {isError && (\n                  <div\n                    className={classNames(\n                      'notification',\n                      { 'is-danger': isError },\n                    )}\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {(currentUserPosts.length < 1\n                  && currentUser\n                  && !isLoadingPosts\n                ) && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {(currentUserPosts.length > 0) && (\n                  <PostsList\n                    currentUserPosts={currentUserPosts}\n                    activePost={activePost}\n                    setActivePost={setActivePost}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': activePost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {activePost && (\n                <PostDetails\n                  activePost={activePost}\n                />\n              )}\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}